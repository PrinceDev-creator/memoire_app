"""
Django settings for edutrack project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
# import environ

# env=environ.Env()
# environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# env.read_env(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-dwt!q@p!g$k-dveh(*5c4d)g$f!&28g+wsodf(3%#%thy(raq_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'utils',
    'faker',
    'environ',
    'rest_framework',
    'django_filters',
    # 'django_otp',
    # 'django_otp_plugins',
    'rest_framework.authtoken',
    'dj_rest_auth',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',  # Pour gérer l'authentification via des comptes sociaux
    'allauth.socialaccount.providers.google',  # Exemple d'intégration avec un fournisseur (Google)
    'dj_rest_auth.registration',
    'rest_framework_simplejwt',
    'corsheaders',
    'flask',
    'django_extensions',
    'numpy',
    'pandas',
    'students',
    'users',
    'level',
    'subject',
    'note',
    'participation',
    'animation',
]

# ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_LOGIN_METHODS = {'email'}  # Permet d'éviter la vérification de l'email
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
# REST_USE_JWT = True  # Utiliser JWT pour l'authentification

# Configuration de l'authentification à deux facteurs (email)
ACCOUNT_AUTHENTICATED_REDIRECT_URL = '/'  # URL de redirection après connexion réussie
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = '/'

# Configuration des paramètres d'email (par exemple pour Gmail)
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER =env('EMAIL_HOST_USER')  # Remplace par ton email
# EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')  # Remplace par ton mot de passe
# DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

REST_AUTH_SERIALIZERS = {
    "LOGIN_SERIALIZER": "dj_rest_auth.serializers.LoginSerializer",
    "USER_DETAILS_SERIALIZER": "dj_rest_auth.serializers.UserDetailsSerializer"
}

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        #   'rest_framework_simplejwt.authentication.JWTAuthentication',
    #     'rest_framework.authentication.SessionAuthentication',  # Ajout pour login/registration
    #     'rest_framework.authentication.BasicAuthentication',    # Ajout pour login/registration
        #   'rest_framework.authentication.TokenAuthentication', 
     ],
}

REST_AUTH_REGISTER_SERIALIZER = 'users.serializers.CustomRegisterSerializer'

AUTH_USER_MODEL='users.UserApp'

AUTHENTICATION_BACKENDS = (
    # 'django.contrib.auth.backends.ModelBackend',  # Authentification de base via Django
    'users.authentication.CustomAuthBackend',
    'allauth.account.auth_backends.AuthenticationBackend',  # Authentification via allauth
)

# Configurer le domaine du site pour la gestion de la session
SITE_ID = 1

# Ajouter cette configuration pour l'OTP par email
# DJANGO_OTP_EMAIL = True  # Permet l'OTP par email

# # Configuration du backend d'authentification 2FA
# OTP_EMAIL = True

# from datetime import timedelta

# SIMPLE_JWT = {
#     'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),  # Token valide pendant 1 heure
#     'REFRESH_TOKEN_LIFETIME': timedelta(days=7),  # Refresh Token valide 7 jours
#     'ROTATE_REFRESH_TOKENS': False,  # Si True, un nouveau refresh token est généré à chaque requête
#     'BLACKLIST_AFTER_ROTATION': True,  # Si True, les anciens refresh tokens deviennent invalides
#     'AUTH_HEADER_TYPES': ('Bearer',),  # Type d'authentification
# }


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'django_otp.middleware.OTPMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'edutrack.urls'

# STATICFILES_DIRS = [BASE_DIR / "static"]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'edutrack.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'oju_db',
        'USER': 'oju_db_admin',
        'PASSWORD':'ojuadmin90',
        'HOST':'localhost',
        'PORT': '5432'
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# AUTH_USER_MODEL = 'django.contrib.auth.models.AbstractUser'  # Remplace 'users.Academy' par ton modèle


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# CSRF_TRUSTED_ORIGINS = [
#     "http://127.0.0.1:8000",  # Ajoute l'URL de ton API
#     "http://localhost:8000",
# ]
# CSRF_COOKIE_SECURE = False